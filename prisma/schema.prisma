generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String     @unique
  passwordHash String     @map("password_hash")
  fullName     String     @map("full_name")
  phone        String?
  role         user_role
  createdAt    DateTime?  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  campaigns    Campaign[]
  orders       Order[]    @relation("CreatedByUser")

  @@map("users")
}

model Category {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  slug      String     @unique
  parentId  String?    @map("parent_id") @db.Uuid
  createdAt DateTime?  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime?  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  parent    Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onUpdate: NoAction)
  children  Category[] @relation("CategoryHierarchy")
  products  Product[]

  @@map("categories")
}

model Product {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  slug             String            @unique
  description      String?
  descriptionAr    String?           @map("description_ar")
  price            Decimal           @db.Decimal(10, 2)
  cost             Decimal?          @db.Decimal(10, 2)
  compareAtPrice   Decimal?          @map("compare_at_price") @db.Decimal(10, 2)
  stockQuantity    Int?              @default(0) @map("stock_quantity")
  categoryId       String?           @map("category_id") @db.Uuid
  isFeatured       Boolean?          @default(false) @map("is_featured")
  hasVariants      Boolean?          @default(false) @map("has_variants")
  createdAt        DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime?         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  campaignProducts CampaignProduct[]
  orderItems       OrderItem[]
  colors           ProductColor[]
  images           ProductImage[]
  sizes            ProductSize[]
  variants         ProductVariant[]
  category         Category?         @relation(fields: [categoryId], references: [id], onUpdate: NoAction)

  @@map("products")
}

model ProductImage {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String   @map("product_id") @db.Uuid
  url       String
  alt       String?
  sortOrder Int?     @default(0) @map("sort_order")
  isPrimary Boolean? @default(false) @map("is_primary")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("product_images")
}

model ProductColor {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String           @map("product_id") @db.Uuid
  name      String
  hexCode   String?          @map("hex_code")
  sortOrder Int?             @default(0) @map("sort_order")
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variants  ProductVariant[]

  @@unique([productId, name])
  @@map("product_colors")
}

model ProductSize {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String           @map("product_id") @db.Uuid
  value     String
  sizeType  size_type?       @default(letter) @map("size_type")
  sortOrder Int?             @default(0) @map("sort_order")
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variants  ProductVariant[]

  @@unique([productId, value])
  @@map("product_sizes")
}

model ProductVariant {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId     String        @map("product_id") @db.Uuid
  colorId       String?       @map("color_id") @db.Uuid
  sizeId        String?       @map("size_id") @db.Uuid
  stockQuantity Int?          @default(0) @map("stock_quantity")
  reservedQty   Int?          @default(0) @map("reserved_qty")
  soldCount     Int?          @default(0) @map("sold_count")
  revenue       Decimal?      @default(0) @db.Decimal(12, 2)
  orderItems    OrderItem[]
  color         ProductColor? @relation(fields: [colorId], references: [id], onUpdate: NoAction)
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  size          ProductSize?  @relation(fields: [sizeId], references: [id], onUpdate: NoAction)

  @@unique([productId, colorId, sizeId])
  @@map("product_variants")
}

model Order {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderNumber      String        @unique @map("order_number")
  customerName     String        @map("customer_name")
  customerPhone    String        @map("customer_phone")
  customerWilaya   String        @map("customer_wilaya")
  customerBaladiya String?       @map("customer_baladiya")
  subtotal         Decimal       @db.Decimal(10, 2)
  deliveryFee      Decimal?      @default(0) @map("delivery_fee") @db.Decimal(10, 2)
  total            Decimal       @db.Decimal(10, 2)
  status           order_status? @default(pending)
  orderSource      order_source? @default(website) @map("order_source")
  posSessionId     String?       @map("pos_session_id") @db.Uuid
  createdById      String?       @map("created_by") @db.Uuid
  confirmedAt      DateTime?     @map("confirmed_at") @db.Timestamptz(6)
  shippedAt        DateTime?     @map("shipped_at") @db.Timestamptz(6)
  deliveredAt      DateTime?     @map("delivered_at") @db.Timestamptz(6)
  cancelledAt      DateTime?     @map("cancelled_at") @db.Timestamptz(6)
  createdAt        DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  orderItems       OrderItem[]
  createdBy        User?         @relation("CreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)

  @@map("orders")
}

model OrderItem {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId       String          @map("order_id") @db.Uuid
  productId     String?         @map("product_id") @db.Uuid
  variantId     String?         @map("variant_id") @db.Uuid
  productName   String          @map("product_name")
  productSku    String?         @map("product_sku")
  selectedColor String?         @map("selected_color")
  selectedSize  String?         @map("selected_size")
  quantity      Int
  unitPrice     Decimal         @map("unit_price") @db.Decimal(10, 2)
  unitCost      Decimal?        @map("unit_cost") @db.Decimal(10, 2)
  lineTotal     Decimal         @map("line_total") @db.Decimal(10, 2)
  lineProfit    Decimal?        @map("line_profit") @db.Decimal(10, 2)
  createdAt     DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  order         Order           @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product       Product?        @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  variant       ProductVariant? @relation(fields: [variantId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("order_items")
}

model Campaign {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  description      String?
  cost             Decimal           @db.Decimal(10, 2)
  budget           Decimal?          @db.Decimal(10, 2)
  startDate        DateTime          @map("start_date") @db.Timestamptz(6)
  endDate          DateTime?         @map("end_date") @db.Timestamptz(6)
  campaignType     String?           @map("campaign_type")
  isActive         Boolean?          @default(true) @map("is_active")
  createdById      String            @map("created_by") @db.Uuid
  createdAt        DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime?         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  campaignProducts CampaignProduct[]
  createdBy        User              @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("campaigns")
}

model CampaignProduct {
  campaignId    String   @map("campaign_id") @db.Uuid
  productId     String   @map("product_id") @db.Uuid
  allocatedCost Decimal? @map("allocated_cost") @db.Decimal(10, 2)
  impressions   Int?     @default(0)
  clicks        Int?     @default(0)
  conversions   Int?     @default(0)
  revenue       Decimal? @default(0) @db.Decimal(12, 2)
  campaign      Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([campaignId, productId])
  @@map("campaign_products")
}

enum order_source {
  website
  pos
  phone
}

enum order_status {
  pending
  confirmed
  processing
  shipped
  delivered
  cancelled
  refunded
}

enum payment_status {
  pending
  paid
  failed
  refunded
}

enum size_type {
  letter
  numeric
  custom
}

enum user_role {
  admin
  sub_admin
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  passwordHash       String     @map("password_hash")
  fullName           String     @map("full_name")
  phone              String?
  role               UserRole
  isActive           Boolean    @default(true) @map("is_active") //review
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")
  canAccessDashboard Boolean    @default(false) @map("can_access_dashboard") //review
  auditLogs          AuditLog[] //review
  campaigns          Campaign[] //review
  orders             Order[]    @relation("CreatedByUser") //review

  @@map("users")
}

model Category {
  id                String              @id @default(uuid())
  name              String
  slug              String              @unique
  parentId          String?             @map("parent_id")
  sortOrder         Int                 @default(0) @map("sort_order") //review
  isActive          Boolean             @default(true) @map("is_active") //review
  productCount      Int                 @default(0) @map("product_count") //review
  minPrice          Decimal?            @map("min_price") @db.Decimal(10, 2) //review
  maxPrice          Decimal?            @map("max_price") @db.Decimal(10, 2) //review
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  parent            Category?           @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children          Category[]          @relation("CategoryHierarchy") 
  categoryAnalytics CategoryAnalytics[] //review
  productAnalytics  ProductAnalytics[] //review
  products          Product[]

  @@index([slug])
  @@index([parentId])
  @@map("categories")
}

model Product {
  id               String                   @id @default(uuid())
  sku              String?                  @unique //review
  name             String
  slug             String                   @unique
  description      String?
  descriptionAr    String?                  @map("description_ar")
  price            Decimal                  @db.Decimal(10, 2)
  cost             Decimal?                 @db.Decimal(10, 2)
  compareAtPrice   Decimal?                 @map("compare_at_price") @db.Decimal(10, 2)
  stockQuantity    Int                      @default(0) @map("stock_quantity")
  lowStockAlert    Int?                     @map("low_stock_alert") //review
  categoryId       String?                  @map("category_id") 
  brand            String? //review
  weight           Decimal?                 @db.Decimal(10, 3) //review
  searchVector     String?                  @map("search_vector") //review
  tags             String[] //review
  isFeatured       Boolean                  @default(false) @map("is_featured")
  isActive         Boolean                  @default(true) @map("is_active") //review
  hasVariants      Boolean                  @default(false) @map("has_variants")
  viewCount        Int                      @default(0) @map("view_count") //review
  soldCount        Int                      @default(0) @map("sold_count") //review
  returnCount      Int                      @default(0) @map("return_count") //review
  totalRevenue     Decimal                  @default(0) @map("total_revenue") @db.Decimal(12, 2) //review
  totalCost        Decimal                  @default(0) @map("total_cost") @db.Decimal(12, 2) //review
  totalProfit      Decimal                  @default(0) @map("total_profit") @db.Decimal(12, 2) //review
  profitMargin     Decimal                  @default(0) @map("profit_margin") @db.Decimal(5, 2) //review
  createdAt        DateTime                 @default(now()) @map("created_at")
  updatedAt        DateTime                 @updatedAt @map("updated_at")
  campaignProducts CampaignProduct[]
  cartItems        CartItem[] //review
  orderItems       OrderItem[]
  productAnalytics ProductAnalytics[] //review
  colors           ProductColor[]
  filterAttributes ProductFilterAttribute[]
  images           ProductImage[]
  sizes            ProductSize[]
  variants         ProductVariant[]
  category         Category?                @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@index([price])
  @@index([brand])
  @@index([isActive, isFeatured])
  @@index([createdAt])
  @@index([profitMargin])
  @@index([totalProfit])
  @@index([viewCount])
  @@index([soldCount])
  // Composite index to speed category + price range queries
  @@index([categoryId, price])
  // GIN index for tags array to speed tag filters
  @@index([tags], type: Gin)
  @@map("products")
}

model ProductImage {
  id        String  @id @default(uuid())
  productId String  @map("product_id")
  url       String
  alt       String?
  sortOrder Int     @default(0) @map("sort_order")
  isPrimary Boolean @default(false) @map("is_primary")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, isPrimary])
  @@map("product_images")
}

model ProductColor {
  id        String           @id @default(uuid())
  productId String           @map("product_id")
  name      String
  hexCode   String?          @map("hex_code")
  sortOrder Int              @default(0) @map("sort_order")
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  variants  ProductVariant[]

  @@unique([productId, name])
  @@index([productId])
  @@map("product_colors")
}

model ProductSize {
  id        String           @id @default(uuid())
  productId String           @map("product_id")
  value     String
  sizeType  SizeType         @default(letter) @map("size_type")
  sortOrder Int              @default(0) @map("sort_order")
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  variants  ProductVariant[]

  @@unique([productId, value])
  @@index([productId])
  @@map("product_sizes")
}

model ProductVariant { //review
  id            String        @id @default(uuid())
  productId     String        @map("product_id")
  skuVariant    String?       @unique @map("sku_variant") //review
  colorId       String?       @map("color_id")
  sizeId        String?       @map("size_id")
  price         Decimal       @db.Decimal(10, 2)
  cost          Decimal?      @db.Decimal(10, 2)
  stockQuantity Int           @default(0) @map("stock_quantity")
  reservedQty   Int           @default(0) @map("reserved_qty")
  soldCount     Int           @default(0) @map("sold_count")
  revenue       Decimal       @default(0) @db.Decimal(12, 2)
  cartItems     CartItem[]
  orderItems    OrderItem[]
  color         ProductColor? @relation(fields: [colorId], references: [id])
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  size          ProductSize?  @relation(fields: [sizeId], references: [id])

  @@unique([productId, colorId, sizeId])
  @@index([productId])
  @@map("product_variants")
}

model ProductFilterAttribute { //review
  id        String  @id @default(uuid())
  productId String  @map("product_id")
  key       String
  value     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, key])
  @@index([key, value])
  @@map("product_filter_attributes")
}

model Order {
  id               String        @id @default(uuid())
  orderNumber      String        @unique @map("order_number")
  customerName     String        @map("customer_name")
  customerPhone    String        @map("customer_phone")
  customerWilaya   String        @map("customer_wilaya")
  customerBaladiya String?       @map("customer_baladiya")
  customerAddress  String?       @map("customer_address") //review
  subtotal         Decimal       @db.Decimal(10, 2) 
  deliveryFee      Decimal       @default(0) @map("delivery_fee") @db.Decimal(10, 2)
  discountAmount   Decimal       @default(0) @map("discount_amount") @db.Decimal(10, 2) //review
  total            Decimal       @db.Decimal(10, 2)
  totalCost        Decimal?      @map("total_cost") @db.Decimal(10, 2) //review
  totalProfit      Decimal?      @map("total_profit") @db.Decimal(10, 2) //review
  status           OrderStatus   @default(pending)
  paymentStatus    PaymentStatus @default(pending) @map("payment_status") //review
  orderSource      OrderSource   @default(website) @map("order_source") 
  posSessionId     String?       @map("pos_session_id")
  cashReceived     Decimal?      @map("cash_received") @db.Decimal(10, 2) //review
  changeGiven      Decimal?      @map("change_given") @db.Decimal(10, 2) //review
  notes            String? //review
  createdById      String?       @map("created_by")
  confirmedAt      DateTime?     @map("confirmed_at")
  shippedAt        DateTime?     @map("shipped_at")
  deliveredAt      DateTime?     @map("delivered_at")
  cancelledAt      DateTime?     @map("cancelled_at")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  customerEmail    String?       @map("customer_email") //review
  orderItems       OrderItem[]
  createdBy        User?         @relation("CreatedByUser", fields: [createdById], references: [id])

  @@index([customerPhone])
  @@index([customerEmail])
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
  @@index([createdAt, status])
  @@map("orders")
}

model OrderItem {
  id            String          @id @default(uuid())
  orderId       String          @map("order_id")
  productId     String?         @map("product_id")
  variantId     String?         @map("variant_id")
  productName   String          @map("product_name") //review
  productSku    String?         @map("product_sku") //review
  selectedColor String?         @map("selected_color")
  selectedSize  String?         @map("selected_size")
  quantity      Int
  unitPrice     Decimal         @map("unit_price") @db.Decimal(10, 2)
  unitCost      Decimal?        @map("unit_cost") @db.Decimal(10, 2)
  lineTotal     Decimal         @map("line_total") @db.Decimal(10, 2)
  lineProfit    Decimal?        @map("line_profit") @db.Decimal(10, 2)
  createdAt     DateTime        @default(now()) @map("created_at")
  order         Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product?        @relation(fields: [productId], references: [id])
  variant       ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([productId])
  @@index([orderId])
  @@map("order_items")
}

model Cart { //review
  id         String     @id @default(uuid())
  sessionId  String     @unique @map("session_id")
  expiresAt  DateTime   @map("expires_at")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  guestEmail String?    @map("guest_email")
  guestPhone String?    @map("guest_phone")
  items      CartItem[]

  @@index([expiresAt])
  @@index([sessionId])
  @@index([guestEmail])
  @@index([guestPhone])
  @@map("carts")
}

model CartItem { //review
  id        String          @id @default(uuid())
  cartId    String          @map("cart_id")
  productId String          @map("product_id")
  variantId String?         @map("variant_id")
  quantity  Int
  addedAt   DateTime        @default(now()) @map("added_at")
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([cartId, productId, variantId])
  @@index([cartId])
  @@map("cart_items")
}

model Campaign {
  id               String            @id @default(uuid())
  name             String
  description      String?
  cost             Decimal           @db.Decimal(10, 2)
  budget           Decimal?          @db.Decimal(10, 2) //review
  startDate        DateTime          @map("start_date")
  endDate          DateTime?         @map("end_date")
  campaignType     String?           @map("campaign_type")
  isActive         Boolean           @default(true) @map("is_active")
  totalRevenue     Decimal           @default(0) @map("total_revenue") @db.Decimal(12, 2) //review
  totalOrders      Int               @default(0) @map("total_orders") //review
  roi              Decimal?          @db.Decimal(10, 2) //review
  createdById      String            @map("created_by")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  campaignProducts CampaignProduct[]
  createdBy        User              @relation(fields: [createdById], references: [id])

  @@index([startDate, endDate])
  @@map("campaigns")
}

model CampaignProduct { //review
  campaignId    String   @map("campaign_id")
  productId     String   @map("product_id")
  allocatedCost Decimal? @map("allocated_cost") @db.Decimal(10, 2)
  impressions   Int      @default(0)
  clicks        Int      @default(0)
  conversions   Int      @default(0)
  revenue       Decimal  @default(0) @db.Decimal(12, 2)
  campaign      Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([campaignId, productId])
  @@map("campaign_products")
}

model ProductAnalytics { //review
  id                  String    @id @default(uuid())
  productId           String    @map("product_id")
  categoryId          String?   @map("category_id")
  periodDate          DateTime  @map("period_date") @db.Date
  periodType          String    @default("daily")
  unitsSold           Int       @default(0) @map("units_sold")
  unitsReturned       Int       @default(0) @map("units_returned")
  revenue             Decimal   @default(0) @db.Decimal(12, 2)
  cost                Decimal   @default(0) @db.Decimal(12, 2)
  profit              Decimal   @default(0) @db.Decimal(12, 2)
  profitMargin        Decimal   @default(0) @map("profit_margin") @db.Decimal(5, 2)
  campaignRevenue     Decimal   @default(0) @map("campaign_revenue") @db.Decimal(12, 2)
  campaignCost        Decimal   @default(0) @map("campaign_cost") @db.Decimal(12, 2)
  views               Int       @default(0)
  addedToCart         Int       @default(0) @map("added_to_cart")
  purchases           Int       @default(0)
  viewToCartRatio     Decimal?  @map("view_to_cart_ratio") @db.Decimal(5, 2)
  cartToPurchaseRatio Decimal?  @map("cart_to_purchase_ratio") @db.Decimal(5, 2)
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  category            Category? @relation(fields: [categoryId], references: [id])
  product             Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, periodDate, periodType])
  @@index([categoryId, periodDate])
  @@index([profitMargin, periodDate])
  @@index([profit, periodDate])
  @@index([periodDate])
  @@map("product_analytics")
}

model CategoryAnalytics { //review
  id            String   @id @default(uuid())
  categoryId    String   @map("category_id")
  periodDate    DateTime @map("period_date") @db.Date
  periodType    String   @default("daily")
  totalProducts Int      @default(0) @map("total_products")
  unitsSold     Int      @default(0) @map("units_sold")
  revenue       Decimal  @default(0) @db.Decimal(12, 2)
  cost          Decimal  @default(0) @db.Decimal(12, 2)
  profit        Decimal  @default(0) @db.Decimal(12, 2)
  profitMargin  Decimal  @default(0) @map("profit_margin") @db.Decimal(5, 2)
  avgOrderValue Decimal  @default(0) @map("avg_order_value") @db.Decimal(10, 2)
  topProducts   Json?    @map("top_products")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, periodDate, periodType])
  @@index([periodDate, profitMargin])
  @@index([periodDate, profit])
  @@map("category_analytics")
}

model DailySalesSummary { //review
  id                String   @id @default(uuid())
  date              DateTime @unique @db.Date
  totalOrders       Int      @default(0) @map("total_orders")
  pendingOrders     Int      @default(0) @map("pending_orders")
  confirmedOrders   Int      @default(0) @map("confirmed_orders")
  deliveredOrders   Int      @default(0) @map("delivered_orders")
  cancelledOrders   Int      @default(0) @map("cancelled_orders")
  totalRevenue      Decimal  @default(0) @map("total_revenue") @db.Decimal(12, 2)
  totalCost         Decimal  @default(0) @map("total_cost") @db.Decimal(12, 2)
  totalProfit       Decimal  @default(0) @map("total_profit") @db.Decimal(12, 2)
  totalDeliveryFees Decimal  @default(0) @map("total_delivery_fees") @db.Decimal(12, 2)
  averageOrderValue Decimal  @default(0) @map("average_order_value") @db.Decimal(10, 2)
  campaignSpend     Decimal  @default(0) @map("campaign_spend") @db.Decimal(12, 2)
  campaignRevenue   Decimal  @default(0) @map("campaign_revenue") @db.Decimal(12, 2)
  topWilayas        Json?    @map("top_wilayas")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([date])
  @@map("daily_sales_summary")
}

model FilterConfig { //review
  id          String  @id @default(uuid())
  filterType  String  @unique @map("filter_type")
  displayName String  @map("display_name")
  values      Json
  isActive    Boolean @default(true) @map("is_active")
  sortOrder   Int     @default(0) @map("sort_order")

  @@map("filter_configs")
}

model AuditLog { //review
  id         String   @id @default(uuid())
  userId     String?  @map("user_id")
  action     String
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id")
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

enum UserRole {
  admin
  sub_admin
}

enum OrderStatus {
  pending
  confirmed
  processing
  shipped
  delivered
  cancelled
  refunded
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

enum OrderSource {
  website
  pos
  phone
}

enum SizeType {
  letter
  numeric
  custom
}